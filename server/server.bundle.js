(()=>{"use strict";var e={641:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,s)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=r(860),i=r(210),c=(0,o.Router)(),s=new i.RecordsAPI;c.get("/records",((e,t)=>n(void 0,void 0,void 0,(function*(){const e=yield s.getRecords();t.json(e)})))),c.post("/record/add",((e,t)=>n(void 0,void 0,void 0,(function*(){const{name:r,time:n,difficulty:o}=e.body;if(!r||!n||!o)return t.status(400).json("Please provide full and correct data records!");const i={name:r,time:n,difficulty:o},c=yield s.addRecord(i);if(!c)return t.json(c);t.json(!0)})))),t.default=c},492:function(e,t,r){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(r(860)),i=n(r(582)),c=r(142),s=n(r(641));(0,c.config)({path:"./server/.env"});const u=(0,o.default)();u.set("PORT",process.env.PORT),u.use(o.default.json()),u.use((0,i.default)()),u.use(s.default),u.listen(u.get("PORT"),(()=>{console.log(`Server has ready on ${u.get("PORT")} port...`)}))},210:function(e,t,r){var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function c(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(c,s)}u((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RecordsAPI=void 0;const o=r(142),i=r(524);(0,o.config)({path:"./server/.env"});const c=new i.PrismaClient;t.RecordsAPI=class{getRecords(){return n(this,void 0,void 0,(function*(){try{return yield c.record.findMany({})}catch(e){return console.error(e),!1}}))}addRecord(e){return n(this,void 0,void 0,(function*(){try{return yield c.record.create({data:{name:e.name,time:e.time,difficulty:e.difficulty}}),!0}catch(e){return console.error(e),!1}}))}}},524:e=>{e.exports=require("@prisma/client")},582:e=>{e.exports=require("cors")},142:e=>{e.exports=require("dotenv")},860:e=>{e.exports=require("express")}},t={};!function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(492)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBT2hELFFBQVVpRCxRQUFRLE8sVUNBekJELEVBQU9oRCxRQUFVaUQsUUFBUSxTLFVDQXpCRCxFQUFPaEQsUUFBVWlELFFBQVEsVSxHQ0NyQkMsRUFBMkIsQ0FBQyxHQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhckQsUUFHckIsSUFBSWdELEVBQVNFLEVBQXlCRSxHQUFZLENBR2pEcEQsUUFBUyxDQUFDLEdBT1gsT0FIQXVELEVBQW9CSCxHQUFVSSxLQUFLUixFQUFPaEQsUUFBU2dELEVBQVFBLEVBQU9oRCxRQUFTbUQsR0FHcEVILEVBQU9oRCxPQUNmLENDbkIwQm1ELENBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZXJ2ZXIvLi9hcGkvcmVjb3Jkcy50cyIsIndlYnBhY2s6Ly9zZXJ2ZXIvLi9pbmRleC50cyIsIndlYnBhY2s6Ly9zZXJ2ZXIvLi9tb2RlbHMvcmVjb3Jkcy50cyIsIndlYnBhY2s6Ly9zZXJ2ZXIvZXh0ZXJuYWwgY29tbW9uanMgXCJAcHJpc21hL2NsaWVudFwiIiwid2VicGFjazovL3NlcnZlci9leHRlcm5hbCBjb21tb25qcyBcImNvcnNcIiIsIndlYnBhY2s6Ly9zZXJ2ZXIvZXh0ZXJuYWwgY29tbW9uanMgXCJkb3RlbnZcIiIsIndlYnBhY2s6Ly9zZXJ2ZXIvZXh0ZXJuYWwgY29tbW9uanMgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vc2VydmVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NlcnZlci93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIEltcG9ydHMgbGlicmFyaWVzXG5jb25zdCBleHByZXNzXzEgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbi8vIEltcG9ydHMgZGF0YSBtb2RlbHNcbmNvbnN0IHJlY29yZHNfMSA9IHJlcXVpcmUoXCIuLi9tb2RlbHMvcmVjb3Jkc1wiKTtcbmNvbnN0IHJvdXRlciA9ICgwLCBleHByZXNzXzEuUm91dGVyKSgpO1xuY29uc3QgcmVjb3Jkc0FQSSA9IG5ldyByZWNvcmRzXzEuUmVjb3Jkc0FQSSgpO1xucm91dGVyLmdldChcIi9yZWNvcmRzXCIsIChyZXEsIHJlcykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgY29uc3QgcmVjb3JkcyA9IHlpZWxkIHJlY29yZHNBUEkuZ2V0UmVjb3JkcygpO1xuICAgIHJlcy5qc29uKHJlY29yZHMpO1xufSkpO1xucm91dGVyLnBvc3QoXCIvcmVjb3JkL2FkZFwiLCAocmVxLCByZXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHsgbmFtZSwgdGltZSwgZGlmZmljdWx0eSB9ID0gcmVxLmJvZHk7XG4gICAgaWYgKCFuYW1lIHx8ICF0aW1lIHx8ICFkaWZmaWN1bHR5KSB7XG4gICAgICAgIHJldHVybiByZXNcbiAgICAgICAgICAgIC5zdGF0dXMoNDAwKVxuICAgICAgICAgICAgLmpzb24oXCJQbGVhc2UgcHJvdmlkZSBmdWxsIGFuZCBjb3JyZWN0IGRhdGEgcmVjb3JkcyFcIik7XG4gICAgfVxuICAgIGNvbnN0IG5ld1JlY29yZCA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdGltZSxcbiAgICAgICAgZGlmZmljdWx0eSxcbiAgICB9O1xuICAgIGNvbnN0IG9wID0geWllbGQgcmVjb3Jkc0FQSS5hZGRSZWNvcmQobmV3UmVjb3JkKTtcbiAgICBpZiAoIW9wKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbihvcCk7XG4gICAgfVxuICAgIHJlcy5qc29uKHRydWUpO1xufSkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gcm91dGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBJbXBvcnRzIGxpYnJhcmllc1xuY29uc3QgZXhwcmVzc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJleHByZXNzXCIpKTtcbmNvbnN0IGNvcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY29yc1wiKSk7XG5jb25zdCBkb3RlbnZfMSA9IHJlcXVpcmUoXCJkb3RlbnZcIik7XG4vLyBJbXBvcnRzIEFQSVxuY29uc3QgcmVjb3Jkc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9zZXJ2ZXIvYXBpL3JlY29yZHNcIikpO1xuKDAsIGRvdGVudl8xLmNvbmZpZykoeyBwYXRoOiBcIi4vc2VydmVyLy5lbnZcIiB9KTtcbmNvbnN0IGFwcCA9ICgwLCBleHByZXNzXzEuZGVmYXVsdCkoKTtcbi8vIEluaXQgRXhwcmVzcyB2YXJpYWJsZXMgYW5kIG1pZGRsZXdhcmVzXG5hcHAuc2V0KFwiUE9SVFwiLCBwcm9jZXNzLmVudi5QT1JUKTtcbmFwcC51c2UoZXhwcmVzc18xLmRlZmF1bHQuanNvbigpKTtcbmFwcC51c2UoKDAsIGNvcnNfMS5kZWZhdWx0KSgpKTtcbmFwcC51c2UocmVjb3Jkc18xLmRlZmF1bHQpO1xuYXBwLmxpc3RlbihhcHAuZ2V0KFwiUE9SVFwiKSwgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgaGFzIHJlYWR5IG9uICR7YXBwLmdldChcIlBPUlRcIil9IHBvcnQuLi5gKTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVjb3Jkc0FQSSA9IHZvaWQgMDtcbi8vIEltcG9ydHMgbGlicmFyaWVzXG5jb25zdCBkb3RlbnZfMSA9IHJlcXVpcmUoXCJkb3RlbnZcIik7XG5jb25zdCBjbGllbnRfMSA9IHJlcXVpcmUoXCJAcHJpc21hL2NsaWVudFwiKTtcbigwLCBkb3RlbnZfMS5jb25maWcpKHsgcGF0aDogXCIuL3NlcnZlci8uZW52XCIgfSk7XG5jb25zdCBwcmlzbWEgPSBuZXcgY2xpZW50XzEuUHJpc21hQ2xpZW50KCk7XG5jbGFzcyBSZWNvcmRzQVBJIHtcbiAgICBnZXRSZWNvcmRzKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNvcmRzID0geWllbGQgcHJpc21hLnJlY29yZC5maW5kTWFueSh7fSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZFJlY29yZChuZXdSZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgeWllbGQgcHJpc21hLnJlY29yZC5jcmVhdGUoeyBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuZXdSZWNvcmQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWU6IG5ld1JlY29yZC50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eTogbmV3UmVjb3JkLmRpZmZpY3VsdHlcbiAgICAgICAgICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJlY29yZHNBUEkgPSBSZWNvcmRzQVBJO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiQHByaXNtYS9jbGllbnRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkb3RlbnZcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5Mik7XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJleHByZXNzXzEiLCJyZWNvcmRzXzEiLCJyb3V0ZXIiLCJSb3V0ZXIiLCJyZWNvcmRzQVBJIiwiUmVjb3Jkc0FQSSIsImdldCIsInJlcSIsInJlcyIsInJlY29yZHMiLCJnZXRSZWNvcmRzIiwianNvbiIsInBvc3QiLCJuYW1lIiwidGltZSIsImRpZmZpY3VsdHkiLCJib2R5Iiwic3RhdHVzIiwibmV3UmVjb3JkIiwib3AiLCJhZGRSZWNvcmQiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiY29yc18xIiwiZG90ZW52XzEiLCJjb25maWciLCJwYXRoIiwiYXBwIiwiZGVmYXVsdCIsInNldCIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwidXNlIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyIsImNsaWVudF8xIiwicHJpc21hIiwiUHJpc21hQ2xpZW50IiwicmVjb3JkIiwiZmluZE1hbnkiLCJlcnIiLCJlcnJvciIsImNyZWF0ZSIsImRhdGEiLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9